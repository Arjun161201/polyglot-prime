
/*******************************************************************************************
 * Comprehensive view of FHIR Content Screening. * 
 ******************************************************************************************/
DROP VIEW IF EXISTS techbd_udi_ingress.fhir_screening_info CASCADE;
CREATE OR REPLACE VIEW techbd_udi_ingress.fhir_screening_info as
WITH filtered_data AS (
    SELECT sihr.hub_interaction_id,
    	sihr.nature ->> 'tenant_id'::text AS tenant_id,
        sihr.payload::jsonb AS payload,
        hintr.created_at
    FROM techbd_udi_ingress.hub_interaction hintr
    JOIN techbd_udi_ingress.sat_interaction_http_request sihr
    ON hintr.hub_interaction_id = sihr.hub_interaction_id
    WHERE hintr.key LIKE '/Bundle%'
    AND sihr.nature ->> 'nature' = 'Original FHIR Payload'    
),
extracted_data AS (
    SELECT 	hub_interaction_id,
    		tenant_id,
    		created_at,
        -- 1) If "resourceType" = "Bundle", select meta -> lastUpdated
        CASE 
            WHEN payload ->> 'resourceType' = 'Bundle' 
            THEN (payload -> 'meta' ->> 'lastUpdated') 
        END AS last_updated,

        -- 2) If entry[] -> resource -> "resourceType" = "Patient", get entry[] -> resource -> id
         ( select  (entry.value -> 'resource' -> 'identifier' -> 0 ->> 'value'::text) 
                   FROM jsonb_array_elements(filtered_data.payload -> 'entry'::text) entry(value)
                  WHERE ((entry.value -> 'resource'::text) ->> 'resourceType'::text) = 'Patient'::text) AS patient_id,
        ( select  ((((entry.value -> 'resource'::text) -> 'name'::text) -> 0)->> 'text'::text) 
                   FROM jsonb_array_elements(filtered_data.payload -> 'entry'::text) entry(value)
                  WHERE ((entry.value -> 'resource'::text) ->> 'resourceType'::text) = 'Patient'::text) AS full_name,
                  ( select  ((((entry.value -> 'resource') -> 'name') -> 0) ->> 'family') 
                   FROM jsonb_array_elements(filtered_data.payload -> 'entry'::text) entry(value)
                  WHERE ((entry.value -> 'resource'::text) ->> 'resourceType'::text) = 'Patient'::text) AS last_name,
        ( select array_to_string(ARRAY( SELECT jsonb_array_elements_text((((entry.value -> 'resource'::text) -> 'name'::text) -> 0) -> 'given'::text) AS jsonb_array_elements_text), ' '::text) 
                   FROM jsonb_array_elements(filtered_data.payload -> 'entry'::text) entry(value)
                  WHERE ((entry.value -> 'resource'::text) ->> 'resourceType'::text) = 'Patient'::text) AS first_name,  
    
        (SELECT entry -> 'resource' ->> 'id'
         FROM jsonb_array_elements(payload -> 'entry') AS entry
         WHERE (entry -> 'resource' ->> 'resourceType') = 'Organization'
        ) AS org_id,
                  
                   
        -- 3) If "resourceType" = "Observation", get category[] -> coding -> display element values in comma separated manner
        (SELECT string_agg(DISTINCT coding ->> 'display', ', ')
         FROM jsonb_array_elements(payload -> 'entry') AS entry
         JOIN jsonb_array_elements(entry -> 'resource' -> 'category') AS category ON true
         JOIN jsonb_array_elements(category -> 'coding') AS coding ON true
         WHERE entry -> 'resource' ->> 'resourceType' = 'Observation'
         AND (coding.value ->> 'system'::text = 'http://hl7.org/fhir/us/sdoh-clinicalcare/CodeSystem/SDOHCC-CodeSystemTemporaryCodes' )
        ) AS category_display,

        -- 4) If entry[] -> resource -> code -> coding[] -> display = "Total Safety Score" 
        -- and entry[] -> resource -> valueCodeableConcept -> coding[] -> code = "{score}" 
        -- then get value of entry[] -> resource -> valueCodeableConcept -> coding[] -> display
        (SELECT value_coding ->> 'display'
         FROM jsonb_array_elements(payload -> 'entry') AS entry
         JOIN jsonb_array_elements(entry -> 'resource' -> 'code' -> 'coding') AS code_coding ON true
         JOIN jsonb_array_elements(entry -> 'resource' -> 'valueCodeableConcept' -> 'coding') AS value_coding ON true
         WHERE code_coding ->> 'display' = 'Total Safety Score'
         AND value_coding ->> 'code' = '{score}'
        ) AS score_display
    FROM filtered_data
)
SELECT hub_interaction_id, 

		tenant_id AS qe_name,
		org_id,
		last_name,
		full_name, 
		first_name,
    created_at AS submitted_date_time,
		patient_id AS patient_mrn,
		last_updated AS survey_date_time,
		category_display AS areas_of_interest,
		score_display AS total_safety_score
FROM extracted_data
WHERE patient_id IS NOT NULL
ORDER BY created_at DESC 
;


/*******************************************************************************************
 * Comprehensive view of FHIR Content Details Screening. * 
 ******************************************************************************************/
DROP VIEW IF EXISTS techbd_udi_ingress.fhir_screening_detail CASCADE;
CREATE OR REPLACE VIEW techbd_udi_ingress.fhir_screening_detail
AS WITH filtered_resources AS (
         SELECT sihr.hub_interaction_id,
            sihr.nature ->> 'tenant_id'::text AS tenant_id,
            jsonb_array_elements(sihr.payload -> 'entry'::text) AS entry
           FROM techbd_udi_ingress.hub_interaction hintr
             JOIN techbd_udi_ingress.sat_interaction_http_request sihr ON hintr.hub_interaction_id = sihr.hub_interaction_id
          WHERE hintr.key ~~ '/Bundle%'::text AND (sihr.nature ->> 'nature'::text) = 'Original FHIR Payload'::text
        ), filtered_data AS (
         SELECT filtered_resources.hub_interaction_id,
            filtered_resources.tenant_id,
            filtered_resources.entry -> 'resource'::text AS resource,
            (filtered_resources.entry -> 'resource'::text) ->> 'resourceType'::text AS resource_type,
            ( SELECT (entry_inner.value -> 'resource'::text) ->> 'id'::text
                   FROM techbd_udi_ingress.hub_interaction hintr_inner
                     JOIN techbd_udi_ingress.sat_interaction_http_request sihr_inner ON hintr_inner.hub_interaction_id = sihr_inner.hub_interaction_id
                     CROSS JOIN LATERAL jsonb_array_elements(sihr_inner.payload -> 'entry'::text) entry_inner(value)
                  WHERE ((entry_inner.value -> 'resource'::text) ->> 'resourceType'::text) = 'Patient'::text AND hintr_inner.hub_interaction_id = filtered_resources.hub_interaction_id
                 LIMIT 1) AS patient_mrn
           FROM filtered_resources
        )
 SELECT hub_interaction_id,
    tenant_id,
    resource,
    resource_type,
    patient_mrn
   FROM filtered_data;


/*******************************************************************************************
 * Comprehensive view of FHIR Content Screening Patient. * 
 ******************************************************************************************/
DROP VIEW IF EXISTS techbd_udi_ingress.fhir_screening_patient CASCADE;
CREATE OR REPLACE VIEW techbd_udi_ingress.fhir_screening_patient
AS WITH filtered_data AS (
         SELECT sihr.hub_interaction_id,
            sihr.nature ->> 'tenant_id'::text AS tenant_id,
            sihr.payload,
            hintr.created_at
           FROM techbd_udi_ingress.hub_interaction hintr
             JOIN techbd_udi_ingress.sat_interaction_http_request sihr ON hintr.hub_interaction_id = sihr.hub_interaction_id
          WHERE hintr.key ~~ '/Bundle%'::text AND (sihr.nature ->> 'nature'::text) = 'Original FHIR Payload'::text
        ), patient_details AS (
         SELECT filtered_data.tenant_id,
            (entry.value -> 'resource'::text) ->> 'id'::text AS patient_id,
            (entry.value -> 'resource'::text) ->> 'resourceType'::text AS patient_resource_type,
            (((entry.value -> 'resource'::text) -> 'name'::text) -> 0) ->> 'text'::text AS full_name,
            (((entry.value -> 'resource'::text) -> 'name'::text) -> 0) ->> 'family'::text AS last_name, 
             array_to_string(
		        ARRAY(
		            SELECT jsonb_array_elements_text((((entry.value -> 'resource'::text) -> 'name'::text) -> 0) -> 'given')
		        ), ' '
		    ) AS first_name,
            (entry.value -> 'resource'::text) ->> 'gender'::text AS gender,
            (entry.value -> 'resource'::text) ->> 'birthDate'::text AS birth_date,
            (((entry.value -> 'resource'::text) -> 'address'::text) -> 0) ->> 'text'::text AS address,
            (((entry.value -> 'resource'::text) -> 'address'::text) -> 0) ->> 'city'::text AS city,
            (((entry.value -> 'resource'::text) -> 'address'::text) -> 0) ->> 'state'::text AS state,
            (((entry.value -> 'resource'::text) -> 'address'::text) -> 0) ->> 'postalCode'::text AS postal_code,
            (entry->'resource'->'communication'->0->'language'->'coding'->0->>'code') as language,
            (((entry.value -> 'resource'::text) -> 'identifier'::text) -> 0) ->> 'value'::text AS medical_record_number,
            (((entry.value -> 'resource'::text) -> 'identifier'::text) -> 3) ->> 'value'::text AS social_security_number
           FROM filtered_data,
            LATERAL jsonb_array_elements(filtered_data.payload -> 'entry'::text) entry(value)
          WHERE ((entry.value -> 'resource'::text) ->> 'resourceType'::text) = 'Patient'::text
        )
 SELECT tenant_id AS qe_name,
    patient_id,
    max(patient_resource_type) AS patient_type,
    max(full_name) AS patient_full_name,
    max(first_name) AS patient_first_name,
    max(last_name) AS patient_last_name,
    max(gender) AS patient_gender,
    max(birth_date) AS patient_birth_date,
    max(address) AS patient_address,
    max(city) AS patient_city,
    max(state) AS patient_state,
    max(postal_code) AS patient_postal_code,
    max(language) AS patient_language,
    max(medical_record_number) AS patient_mrn,
    max(social_security_number) AS patient_ssn
   FROM patient_details
  GROUP BY tenant_id, patient_id
  ORDER BY patient_id DESC;


/*******************************************************************************************
 * Comprehensive view of FHIR Content Screening Organization. * 
 ******************************************************************************************/
DROP VIEW IF EXISTS techbd_udi_ingress.fhir_screening_organization CASCADE;
CREATE OR REPLACE VIEW techbd_udi_ingress.fhir_screening_organization 
AS WITH filtered_data AS (
    SELECT sihr.hub_interaction_id,
           sihr.nature ->> 'tenant_id' AS tenant_id,
           sihr.payload::jsonb AS payload,
           hintr.created_at
    FROM techbd_udi_ingress.hub_interaction hintr
    JOIN techbd_udi_ingress.sat_interaction_http_request sihr
    ON hintr.hub_interaction_id = sihr.hub_interaction_id
    WHERE hintr.key LIKE '/Bundle%'
      AND sihr.nature ->> 'nature' = 'Original FHIR Payload'    
),
patient_details AS (
    SELECT tenant_id,
           (entry -> 'resource') ->> 'id' AS org_id,
           (entry -> 'resource') ->> 'resourceType' AS org_resource_type,
           (entry -> 'resource') ->> 'name' AS org_name,
           (entry -> 'resource') ->> 'active' AS org_active,
           (entry -> 'resource') ->'address'->0->>'text' AS org_address,
           (entry -> 'resource') ->'address'->0->>'city' AS org_city,
           (entry -> 'resource') ->'address'->0->>'state' AS org_state,
           (entry -> 'resource') ->'address'->0->>'postalCode' AS org_postal_code
    FROM filtered_data,
         jsonb_array_elements(payload -> 'entry') AS entry
    WHERE (entry -> 'resource') ->> 'resourceType' = 'Organization'
)
SELECT tenant_id AS qe_name,
       org_id,
       MAX(org_resource_type) as org_type,
       MAX(org_name) as org_name,
       MAX(org_active) as org_active,
       MAX(org_address) as org_address,
       MAX(org_city) as org_city,
       MAX(org_state) as org_state,
       MAX(org_postal_code) as org_postal_code
FROM patient_details
GROUP BY tenant_id, org_id
ORDER BY org_id DESC;
