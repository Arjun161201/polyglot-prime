DROP FUNCTION IF EXISTS techbd_udi_ingress.refresh_materialized_view();

CREATE OR REPLACE FUNCTION techbd_udi_ingress.refresh_materialized_view()
RETURNS void
LANGUAGE plpgsql
AS $function$
DECLARE
    v_status TEXT;
    v_hub_diagnostic_id TEXT;
    v_message TEXT;
    v_exception_id TEXT;
    v_sqlstate TEXT;
    v_pg_exception_detail TEXT;
    v_pg_exception_hint TEXT;
    v_pg_exception_context TEXT;
    sat_diagnostic_log_parent_id TEXT;
BEGIN
    -- 3. Refresh fhir_screening_info_mat
    v_hub_diagnostic_id := gen_random_uuid()::text;
    BEGIN
        CALL techbd_udi_ingress.register_diagnostic_log(
            v_hub_diagnostic_id,
            'fhir_screening_info_mat',
            'admin',  
            'cron_job',
            'info',
            'Refresh fhir_screening_info_mat',
            'admin',
            'started',
            NULL,
            0,
            '{"view_name": "fhir_screening_info_mat"}'::jsonb
        );
    EXCEPTION
        WHEN OTHERS THEN
            NULL; 
    END;
    BEGIN                
        REFRESH MATERIALIZED VIEW CONCURRENTLY techbd_udi_ingress.fhir_screening_info_mat;
        v_status := 'success';
        SELECT sat_diagnostic_log_id INTO sat_diagnostic_log_parent_id from techbd_udi_ingress.sat_diagnostic_log where hub_diagnostic_id = v_hub_diagnostic_id and hierarchy_level= 0;
        -- Log successful refresh
        CALL techbd_udi_ingress.register_diagnostic_log(
            v_hub_diagnostic_id,
            'fhir_screening_info_mat',
            'admin',  
            'cron_job',
            'info',
            'Refreshed fhir_screening_info_mat',
            'admin',
            v_status,
            sat_diagnostic_log_parent_id,
            1,
            '{"view_name": "fhir_screening_info_mat"}'::jsonb
        );
    EXCEPTION
        WHEN OTHERS THEN
            GET STACKED DIAGNOSTICS
                v_sqlstate = RETURNED_SQLSTATE,
                v_pg_exception_detail = PG_EXCEPTION_DETAIL,
                v_pg_exception_hint = PG_EXCEPTION_HINT,
                v_pg_exception_context = PG_EXCEPTION_CONTEXT;
                v_message := SQLERRM;
                -- Handle exception using the register_issue procedure
                v_exception_id := techbd_udi_ingress.register_issue(
                    v_hub_diagnostic_id,
                    'refresh_materialized_view',
                    v_message,
                    'SQL',
                    v_sqlstate,
                    v_pg_exception_detail,
                    v_pg_exception_hint,
                    v_pg_exception_context,
                    'admin',
                    'cron_job',
                    '{"view_name": "fhir_screening_info_mat"}'::jsonb
                );
    END;

    -- 5. Refresh fhir_validation_issue_mat
    v_hub_diagnostic_id := gen_random_uuid()::text;
    BEGIN
        CALL techbd_udi_ingress.register_diagnostic_log(
            v_hub_diagnostic_id,
            'fhir_validation_issue_mat',
            'admin',  
            'cron_job',
            'info',
            'Refresh fhir_validation_issue_mat',
            'admin',
            'started',
            NULL,
            0,
            '{"view_name": "fhir_validation_issue_mat"}'::jsonb
        );
    EXCEPTION
        WHEN OTHERS THEN
            NULL; 
    END;
    BEGIN
        REFRESH MATERIALIZED VIEW CONCURRENTLY techbd_udi_ingress.fhir_validation_issue_mat;
        v_status := 'success';
        SELECT sat_diagnostic_log_id INTO sat_diagnostic_log_parent_id from techbd_udi_ingress.sat_diagnostic_log where hub_diagnostic_id = v_hub_diagnostic_id and hierarchy_level= 0;
        -- Log successful refresh
        CALL techbd_udi_ingress.register_diagnostic_log(
            v_hub_diagnostic_id,
            'fhir_validation_issue_mat',
            'admin',  
            'cron_job',
            'info',
            'Refreshed fhir_validation_issue_mat',
            'admin',
            v_status,
            sat_diagnostic_log_parent_id,
            1,
            '{"view_name": "fhir_validation_issue_mat"}'::jsonb
        );
    EXCEPTION
        WHEN OTHERS THEN
            GET STACKED DIAGNOSTICS
                v_sqlstate = RETURNED_SQLSTATE,
                v_pg_exception_detail = PG_EXCEPTION_DETAIL,
                v_pg_exception_hint = PG_EXCEPTION_HINT,
                v_pg_exception_context = PG_EXCEPTION_CONTEXT;
                v_message := SQLERRM;
                -- Handle exception using the register_issue procedure
                v_exception_id := techbd_udi_ingress.register_issue(
                    v_hub_diagnostic_id,
                    'fhir_validation_issue_mat',
                    v_message,
                    'SQL',
                    v_sqlstate,
                    v_pg_exception_detail,
                    v_pg_exception_hint,
                    v_pg_exception_context,
                    'admin',
                    'cron_job',
                    '{"view_name": "fhir_validation_issue_mat"}'::jsonb
                );
    END;

    -- 7. Refresh fhir_session_diagnostics_mat
    v_hub_diagnostic_id := gen_random_uuid()::text;
    BEGIN
        CALL techbd_udi_ingress.register_diagnostic_log(
            v_hub_diagnostic_id,
            'fhir_session_diagnostics_mat',
            'admin',  
            'cron_job',
            'info',
            'Refresh fhir_session_diagnostics_mat',
            'admin',
            'started',
            NULL,
            0,
            '{"view_name": "fhir_session_diagnostics_mat"}'::jsonb
        );
    EXCEPTION
        WHEN OTHERS THEN
            NULL; 
    END;
    BEGIN
        REFRESH MATERIALIZED VIEW CONCURRENTLY techbd_udi_ingress.fhir_session_diagnostics_mat;
        v_status := 'success';
        SELECT sat_diagnostic_log_id INTO sat_diagnostic_log_parent_id from techbd_udi_ingress.sat_diagnostic_log where hub_diagnostic_id = v_hub_diagnostic_id and hierarchy_level= 0;
        -- Log successful refresh
        CALL techbd_udi_ingress.register_diagnostic_log(
            v_hub_diagnostic_id,
            'fhir_session_diagnostics_mat',
            'admin',  
            'cron_job',
            'info',
            'Refreshed fhir_session_diagnostics_mat',
            'admin',
            v_status,
            sat_diagnostic_log_parent_id,
            1,
            '{"view_name": "fhir_session_diagnostics_mat"}'::jsonb
        );
    EXCEPTION
        WHEN OTHERS THEN
            GET STACKED DIAGNOSTICS
                v_sqlstate = RETURNED_SQLSTATE,
                v_pg_exception_detail = PG_EXCEPTION_DETAIL,
                v_pg_exception_hint = PG_EXCEPTION_HINT,
                v_pg_exception_context = PG_EXCEPTION_CONTEXT;
                v_message := SQLERRM;
                -- Handle exception using the register_issue procedure
                v_exception_id := techbd_udi_ingress.register_issue(
                    v_hub_diagnostic_id,
                    'fhir_session_diagnostics_mat',
                    v_message,
                    'SQL',
                    v_sqlstate,
                    v_pg_exception_detail,
                    v_pg_exception_hint,
                    v_pg_exception_context,
                    'admin',
                    'cron_job',
                    '{"view_name": "fhir_session_diagnostics_mat"}'::jsonb
                );
    END;


END;
$function$;




/*******************************************************************************************
 * Comprehensive view of Cron Job. * 
 ******************************************************************************************/
DROP VIEW IF EXISTS techbd_udi_ingress.cron_job_details CASCADE;
CREATE or REPLACE
view techbd_udi_ingress.cron_job_details AS
SELECT 
    hd.hub_diagnostic_id,
    hd."key",
    MAX(sdl.diagnostic_log_message) AS diagnostic_log_message,
    MIN(CASE WHEN sdl.status = 'started' THEN sdl.created_at END) AS start_time,
    MAX(CASE WHEN sdl.status = 'success' THEN sdl.created_at else sde.created_at END) AS end_time,
    MAX(CASE WHEN sdl.status = 'success' THEN sdl.status else 'failed' END) AS final_status,
    MAX(CASE WHEN sde.message is not NULL THEN sde.message else '' END) AS error,
    MAX(CASE WHEN sde.err_pg_exception_hint is not NULL THEN sde.err_pg_exception_hint else '' END) AS remediation
FROM 
    techbd_udi_ingress.hub_diagnostic hd
JOIN 
    techbd_udi_ingress.sat_diagnostic_log sdl 
    ON hd.hub_diagnostic_id = sdl.hub_diagnostic_id
LEFT JOIN 
    techbd_udi_ingress.sat_diagnostic_exception sde  
    ON hd.hub_diagnostic_id = sde.hub_diagnostic_id    
WHERE 
    sdl.provenance = 'cron_job' 
GROUP BY 
    hd.hub_diagnostic_id, 
    hd."key"
ORDER BY 
    end_time DESC;

