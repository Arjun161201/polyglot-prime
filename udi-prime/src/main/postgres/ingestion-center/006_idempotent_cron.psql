DROP FUNCTION IF EXISTS techbd_udi_ingress.refresh_materialized_view();

CREATE OR REPLACE FUNCTION techbd_udi_ingress.refresh_materialized_view()
RETURNS void
LANGUAGE plpgsql
AS $function$
DECLARE
    v_status TEXT;
    v_hub_diagnostic_id TEXT;
    v_message TEXT;
    v_exception_id TEXT;
    v_sqlstate TEXT;
    v_pg_exception_detail TEXT;
    v_pg_exception_hint TEXT;
    v_pg_exception_context TEXT;
    sat_diagnostic_log_parent_id TEXT;
BEGIN
    -- 1. Refresh interaction_http_request_mat
    v_hub_diagnostic_id := gen_random_uuid()::text;
    BEGIN
        CALL techbd_udi_ingress.register_diagnostic_log(
            v_hub_diagnostic_id,
            'interaction_http_request_mat',
            'admin',  
            'cron_job',
            'info',
            'Refresh interaction_http_request_mat',
            'admin',
            'started',
            NULL,
            0,
            '{"view_name": "interaction_http_request_mat"}'::jsonb
        );
    EXCEPTION
        WHEN OTHERS THEN
            NULL;  
    END;  
    BEGIN                      
        REFRESH MATERIALIZED VIEW CONCURRENTLY techbd_udi_ingress.interaction_http_request_mat;
        v_status := 'success';
        -- Log successful refresh
        SELECT sat_diagnostic_log_id INTO sat_diagnostic_log_parent_id FROM techbd_udi_ingress.sat_diagnostic_log WHERE hub_diagnostic_id = v_hub_diagnostic_id AND hierarchy_level= 0;
        CALL techbd_udi_ingress.register_diagnostic_log(
            v_hub_diagnostic_id,
            'interaction_http_request_mat',
            'admin',  
            'cron_job',
            'info',
            'Refreshed interaction_http_request_mat',
            'admin',
            v_status,
            sat_diagnostic_log_parent_id,
            1,
            '{"view_name": "interaction_http_request_mat"}'::jsonb
        );
    EXCEPTION
        WHEN OTHERS THEN
            GET STACKED DIAGNOSTICS
                v_sqlstate = RETURNED_SQLSTATE,
                v_pg_exception_detail = PG_EXCEPTION_DETAIL,
                v_pg_exception_hint = PG_EXCEPTION_HINT,
                v_pg_exception_context = PG_EXCEPTION_CONTEXT;
                v_message := SQLERRM;
                -- Handle exception using the register_issue procedure
                v_exception_id := techbd_udi_ingress.register_issue(
                    v_hub_diagnostic_id,
                    'interaction_http_request_mat',
                    v_message,
                    'SQL',
                    v_sqlstate,
                    v_pg_exception_detail,
                    v_pg_exception_hint,
                    v_pg_exception_context,
                    'admin',
                    'cron_job',
                    '{"view_name": "interaction_http_request_mat"}'::jsonb
                );
    END;

    -- 2. Refresh interaction_http_request_observe_mat
    v_hub_diagnostic_id := gen_random_uuid()::text;
    BEGIN
        CALL techbd_udi_ingress.register_diagnostic_log(
            v_hub_diagnostic_id,
            'interaction_http_request_observe_mat',
            'admin',  
            'cron_job',
            'info',
            'Refresh interaction_http_request_observe_mat',
            'admin',
            'started',
            NULL,
            0,
            '{"view_name": "interaction_http_request_observe_mat"}'::jsonb
        );
    EXCEPTION
        WHEN OTHERS THEN
            NULL;  
    END; 
    BEGIN           
        REFRESH MATERIALIZED VIEW CONCURRENTLY techbd_udi_ingress.interaction_http_request_observe_mat;
        v_status := 'success';
        SELECT sat_diagnostic_log_id INTO sat_diagnostic_log_parent_id from techbd_udi_ingress.sat_diagnostic_log where hub_diagnostic_id = v_hub_diagnostic_id and hierarchy_level= 0;
        -- Log successful refresh
        CALL techbd_udi_ingress.register_diagnostic_log(
            v_hub_diagnostic_id,
            'interaction_http_request_observe_mat',
            'admin',  
            'cron_job',
            'info',
            'Refreshed interaction_http_request_observe_mat',
            'admin',
            v_status,
            sat_diagnostic_log_parent_id,
            1,
            '{"view_name": "interaction_http_request_observe_mat"}'::jsonb
        );
    EXCEPTION
        WHEN OTHERS THEN
            GET STACKED DIAGNOSTICS
                v_sqlstate = RETURNED_SQLSTATE,
                v_pg_exception_detail = PG_EXCEPTION_DETAIL,
                v_pg_exception_hint = PG_EXCEPTION_HINT,
                v_pg_exception_context = PG_EXCEPTION_CONTEXT;
                v_message := SQLERRM;
                -- Handle exception using the register_issue procedure
                v_exception_id := techbd_udi_ingress.register_issue(
                    v_hub_diagnostic_id,
                    'interaction_http_request_observe_mat',
                    v_message,
                    'SQL',
                    v_sqlstate,
                    v_pg_exception_detail,
                    v_pg_exception_hint,
                    v_pg_exception_context,
                    'admin',
                    'cron_job',
                    '{"view_name": "interaction_http_request_observe_mat"}'::jsonb
                );
    END;

    -- 3. Refresh fhir_screening_info_mat
    v_hub_diagnostic_id := gen_random_uuid()::text;
    BEGIN
        CALL techbd_udi_ingress.register_diagnostic_log(
            v_hub_diagnostic_id,
            'fhir_screening_info_mat',
            'admin',  
            'cron_job',
            'info',
            'Refresh fhir_screening_info_mat',
            'admin',
            'started',
            NULL,
            0,
            '{"view_name": "fhir_screening_info_mat"}'::jsonb
        );
    EXCEPTION
        WHEN OTHERS THEN
            NULL; 
    END;
    BEGIN                
        REFRESH MATERIALIZED VIEW CONCURRENTLY techbd_udi_ingress.fhir_screening_info_mat;
        v_status := 'success';
        SELECT sat_diagnostic_log_id INTO sat_diagnostic_log_parent_id from techbd_udi_ingress.sat_diagnostic_log where hub_diagnostic_id = v_hub_diagnostic_id and hierarchy_level= 0;
        -- Log successful refresh
        CALL techbd_udi_ingress.register_diagnostic_log(
            v_hub_diagnostic_id,
            'fhir_screening_info_mat',
            'admin',  
            'cron_job',
            'info',
            'Refreshed fhir_screening_info_mat',
            'admin',
            v_status,
            sat_diagnostic_log_parent_id,
            1,
            '{"view_name": "fhir_screening_info_mat"}'::jsonb
        );
    EXCEPTION
        WHEN OTHERS THEN
            GET STACKED DIAGNOSTICS
                v_sqlstate = RETURNED_SQLSTATE,
                v_pg_exception_detail = PG_EXCEPTION_DETAIL,
                v_pg_exception_hint = PG_EXCEPTION_HINT,
                v_pg_exception_context = PG_EXCEPTION_CONTEXT;
                v_message := SQLERRM;
                -- Handle exception using the register_issue procedure
                v_exception_id := techbd_udi_ingress.register_issue(
                    v_hub_diagnostic_id,
                    'refresh_materialized_view',
                    v_message,
                    'SQL',
                    v_sqlstate,
                    v_pg_exception_detail,
                    v_pg_exception_hint,
                    v_pg_exception_context,
                    'admin',
                    'cron_job',
                    '{"view_name": "fhir_screening_info_mat"}'::jsonb
                );
    END;

    -- 4. Refresh interaction_http_request_resource_type_mat
    v_hub_diagnostic_id := gen_random_uuid()::text;
    BEGIN
        CALL techbd_udi_ingress.register_diagnostic_log(
            v_hub_diagnostic_id,
            'interaction_http_request_resource_type_mat',
            'admin',  
            'cron_job',
            'info',
            'Refresh interaction_http_request_resource_type_mat',
            'admin',
            'started',
            NULL,
            0,
            '{"view_name": "interaction_http_request_resource_type_mat"}'::jsonb
        );
    EXCEPTION
        WHEN OTHERS THEN
            NULL; 
    END;
    BEGIN        
        REFRESH MATERIALIZED VIEW CONCURRENTLY techbd_udi_ingress.interaction_http_request_resource_type_mat;
        v_status := 'success';
        SELECT sat_diagnostic_log_id INTO sat_diagnostic_log_parent_id from techbd_udi_ingress.sat_diagnostic_log where hub_diagnostic_id = v_hub_diagnostic_id and hierarchy_level= 0;
        -- Log successful refresh
        CALL techbd_udi_ingress.register_diagnostic_log(
            v_hub_diagnostic_id,
            'interaction_http_request_resource_type_mat',
            'admin',  
            'cron_job',
            'info',
            'Refreshed interaction_http_request_resource_type_mat',
            'admin',
            v_status,
            sat_diagnostic_log_parent_id,
            1,
            '{"view_name": "interaction_http_request_resource_type_mat"}'::jsonb
        );
    EXCEPTION
        WHEN OTHERS THEN
            GET STACKED DIAGNOSTICS
                v_sqlstate = RETURNED_SQLSTATE,
                v_pg_exception_detail = PG_EXCEPTION_DETAIL,
                v_pg_exception_hint = PG_EXCEPTION_HINT,
                v_pg_exception_context = PG_EXCEPTION_CONTEXT;
                v_message := SQLERRM;
                -- Handle exception using the register_issue procedure
                v_exception_id := techbd_udi_ingress.register_issue(
                    v_hub_diagnostic_id,
                    'interaction_http_request_resource_type_mat',
                    v_message,
                    'SQL',
                    v_sqlstate,
                    v_pg_exception_detail,
                    v_pg_exception_hint,
                    v_pg_exception_context,
                    'admin',
                    'cron_job',
                    '{"view_name": "interaction_http_request_resource_type_mat"}'::jsonb
                );
    END;

    -- 5. Refresh fhir_validation_issue_mat
    v_hub_diagnostic_id := gen_random_uuid()::text;
    BEGIN
        CALL techbd_udi_ingress.register_diagnostic_log(
            v_hub_diagnostic_id,
            'fhir_validation_issue_mat',
            'admin',  
            'cron_job',
            'info',
            'Refresh fhir_validation_issue_mat',
            'admin',
            'started',
            NULL,
            0,
            '{"view_name": "fhir_validation_issue_mat"}'::jsonb
        );
    EXCEPTION
        WHEN OTHERS THEN
            NULL; 
    END;
    BEGIN
        REFRESH MATERIALIZED VIEW CONCURRENTLY techbd_udi_ingress.fhir_validation_issue_mat;
        v_status := 'success';
        SELECT sat_diagnostic_log_id INTO sat_diagnostic_log_parent_id from techbd_udi_ingress.sat_diagnostic_log where hub_diagnostic_id = v_hub_diagnostic_id and hierarchy_level= 0;
        -- Log successful refresh
        CALL techbd_udi_ingress.register_diagnostic_log(
            v_hub_diagnostic_id,
            'fhir_validation_issue_mat',
            'admin',  
            'cron_job',
            'info',
            'Refreshed fhir_validation_issue_mat',
            'admin',
            v_status,
            sat_diagnostic_log_parent_id,
            1,
            '{"view_name": "fhir_validation_issue_mat"}'::jsonb
        );
    EXCEPTION
        WHEN OTHERS THEN
            GET STACKED DIAGNOSTICS
                v_sqlstate = RETURNED_SQLSTATE,
                v_pg_exception_detail = PG_EXCEPTION_DETAIL,
                v_pg_exception_hint = PG_EXCEPTION_HINT,
                v_pg_exception_context = PG_EXCEPTION_CONTEXT;
                v_message := SQLERRM;
                -- Handle exception using the register_issue procedure
                v_exception_id := techbd_udi_ingress.register_issue(
                    v_hub_diagnostic_id,
                    'fhir_validation_issue_mat',
                    v_message,
                    'SQL',
                    v_sqlstate,
                    v_pg_exception_detail,
                    v_pg_exception_hint,
                    v_pg_exception_context,
                    'admin',
                    'cron_job',
                    '{"view_name": "fhir_validation_issue_mat"}'::jsonb
                );
    END;

END;
$function$;




/*******************************************************************************************
 * Comprehensive view of Cron Job. * 
 ******************************************************************************************/
-- DROP VIEW IF EXISTS techbd_udi_ingress.cron_job_details CASCADE;
-- CREATE or REPLACE
-- view techbd_udi_ingress.cron_job_details AS
-- SELECT
--     jrd.jobid,
--     j.jobname as job_name,
--     jrd.status as job_run_status,
--     case when j.active is true then 'Active' else 'Inactive' end as current_job_status,
--     jrd.return_message,
--     jrd.start_time,
--     jrd.end_time
-- FROM
--     cron.job_run_details jrd
-- JOIN
--     cron.job j
-- ON
--     j.jobid = jrd.jobid
-- ORDER BY jrd.start_time DESC;

