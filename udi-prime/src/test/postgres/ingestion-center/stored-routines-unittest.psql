CREATE OR REPLACE FUNCTION techbd_udi_assurance.test_udi_insert_interaction(schema_name text DEFAULT 'techbd_udi_ingress'::text)
 RETURNS SETOF text
 LANGUAGE plpgsql
AS $function$
DECLARE    
    return_value                TEXT;
    source_content              TEXT;
    hub_interaction_row         techbd_udi_ingress.hub_interaction%ROWTYPE;
    sat_interaction_http_request_row techbd_udi_ingress.sat_interaction_http_request%ROWTYPE; 
    interaction_id_val          TEXT;
   	interaction_key_val			TEXT;
    created_user                TEXT;
    provenance_info             TEXT;
    elaboration_info            jsonb;
BEGIN
    -- Check if the table 'pgtap_fixtures_json' exists
    IF EXISTS (SELECT 1 FROM information_schema.tables 
               WHERE table_schema = 'techbd_udi_assurance' 
               AND table_name = 'pgtap_fixtures_json') THEN 
        SELECT "jsonb" INTO source_content
        FROM techbd_udi_assurance.pgtap_fixtures_json 
        WHERE "name" = 'interaction-1';
    ELSE 
        RETURN NEXT 'Table techbd_udi_assurance.pgtap_fixtures_json does not exist';
        RETURN;
    END IF;
    
    -- Check existence of required functions
    RETURN NEXT has_function(
        schema_name,
        'udi_insert_interaction',
        ARRAY['text', 'text','jsonb', 'jsonb', 'text', 'text'],
        'Function udi_insert_interaction exists'
    );

    interaction_id_val := techbd_udi_ingress.uuid_generate_v4();
   	interaction_key_val := techbd_udi_ingress.uuid_generate_v4();
    created_user := 'test-user1';
    provenance_info := 'provenance-1';
    elaboration_info := '{"key" : "elaboration"}'::jsonb;
   
    -- Upsert into hub_interaction
    hub_interaction_row := techbd_udi_ingress.hub_interaction_upserted(
        interaction_id_val,
        interaction_key_val,
        created_user,
        provenance_info
    );
        
    RETURN NEXT ok(hub_interaction_row.hub_interaction_id IS NOT NULL, 'Successfully executed the function hub_interaction_upserted with return value');
  
    -- Upsert into sat_interaction_http_request
    sat_interaction_http_request_row := techbd_udi_ingress.sat_interaction_http_request_upserted(
        hub_interaction_row.hub_interaction_id,
        source_content::jsonb,
        elaboration_info,
        created_user,
        provenance_info
    );  

    RETURN NEXT ok(sat_interaction_http_request_row.sat_interaction_http_request_id IS NOT NULL, 'Successfully executed the function sat_interaction_http_request_upserted with return value');

    -- Insert into udi_insert_interaction
    return_value := techbd_udi_ingress.udi_insert_interaction(
        interaction_id_val,
        interaction_key_val,
        source_content::jsonb,
        elaboration_info,
        created_user, 
        provenance_info
    );

    RETURN NEXT ok(return_value IS NOT NULL, 'Successfully executed the function udi_insert_interaction with return value');

    -- Verify inserts into various tables
    RETURN NEXT ok(
        EXISTS(SELECT 1 FROM techbd_udi_ingress.hub_interaction hub
               WHERE hub.key = interaction_key_val
               AND hub.provenance = provenance_info
               AND hub.created_by = created_user
               AND hub.hub_interaction_id = hub_interaction_row.hub_interaction_id
               ),
        'Successfully retrieved the inserted hub_interaction details'
    );

    RETURN NEXT ok(
        EXISTS(SELECT 1 FROM techbd_udi_ingress.sat_interaction_http_request sat
               WHERE sat.sat_interaction_http_request_id = sat_interaction_http_request_row.sat_interaction_http_request_id
               AND sat.hub_interaction_id = hub_interaction_row.hub_interaction_id
               AND sat.created_by = created_user
               AND sat.provenance = provenance_info
               ),
        'Successfully retrieved the inserted sat_interaction_http_request details'
    );   
   
END;
$function$
;
/*====================================================================================================================================*/
CREATE OR REPLACE FUNCTION techbd_udi_assurance.test_udi_insert_session_with_state(schema_name text DEFAULT 'techbd_udi_ingress'::text)
 RETURNS SETOF text
 LANGUAGE plpgsql
AS $function$
DECLARE    
    err_returned_sqlstate         			TEXT; -- Variable to store SQLSTATE of the error
    err_message_text              			TEXT; -- Variable to store the message text of the error
    err_pg_exception_detail       			TEXT; -- Variable to store the detail of the error
    err_pg_exception_hint         			TEXT; -- Variable to store the hint of the error
    err_pg_exception_context      			TEXT; -- Variable to store the context of the error
    
    return_value                  			TEXT;
   	source_content 							TEXT;
   	hub_exception_row             					techbd_udi_ingress.hub_exception%ROWTYPE;
   	sat_operation_session_entry_payload_row 		techbd_udi_ingress.sat_operation_session_entry_payload%ROWTYPE;
   	hub_operation_session_row						techbd_udi_ingress.hub_operation_session%ROWTYPE;
   	hub_operation_session_entry_row 				techbd_udi_ingress.hub_operation_session_entry%ROWTYPE;
   	link_session_entry_row							techbd_udi_ingress.link_session_entry%ROWTYPE;
   	sat_operation_session_entry_session_state_row	techbd_udi_ingress.sat_operation_session_entry_session_state%ROWTYPE;
   	session_info                  					techbd_udi_ingress.session_identifier;
   	
   	interaction_id_value	TEXT;
   	interaction_key_value	TEXT;
   	namespace_value			TEXT;
    created_user      		TEXT;
    provenance_value      	TEXT;
   	content_type_value		TEXT;
   	boundary_value			jsonb;
    elaboration_value     	jsonb;
   	from_state_value		TEXT;
   	to_state_value			TEXT;
   	hub_interaction_row		techbd_udi_ingress.hub_interaction%ROWTYPE;
   
BEGIN
	
	interaction_id_value 	:= techbd_udi_ingress.uuid_generate_v4();
	interaction_key_value	:= techbd_udi_ingress.uuid_generate_v4();
	namespace_value			:= 'namespace1';
	created_user 			:= 'test-user1';
	provenance_value 		:= 'provenance-1';
	elaboration_value 		:= '{"key" : "elaboration"}'::jsonb;
	content_type_value 		:= 'application/json';
	boundary_value			:= '{"key1": "boundary-1"}';
	created_user			:= 'test-user-1';
	from_state_value		:= 'start process';
	to_state_value			:= 'end process';
	
	IF EXISTS (SELECT 1 FROM information_schema.tables WHERE table_schema = 'techbd_udi_assurance' 
    			AND table_name = 'pgtap_fixtures_json') THEN 
   		SELECT "jsonb" INTO source_content
		FROM techbd_udi_assurance.pgtap_fixtures_json 
		WHERE "name" = 'interaction-2';
	ELSE 
		RETURN NEXT ok(NULL,'Table techbd_udi_assurance.pgtap_fixtures_json exists');
    END IF;
    
    -- Check existence of required functions
    RETURN NEXT has_function(
        schema_name,
        'udi_insert_session_with_state',
        ARRAY['text', 'text', 'text', 'text', 'jsonb', 'jsonb', 'text', 'text', 'text', 'text'],
        'Function udi_insert_session_with_state exists'
    );
   
    RETURN NEXT has_function(
        schema_name,
        'udi_insert_session_state',
        ARRAY['text', 'text', 'text', 'text', 'text'],
        'Function udi_insert_session_state exists'
    );
   
    RETURN NEXT has_function(
        schema_name,
        'hub_operation_session_upserted',
        ARRAY['text', 'text', 'text'],
        'Function hub_operation_session_upserted exists'
    );
   
    RETURN NEXT has_function(
        schema_name,
        'link_session_entry_upserted',
        ARRAY['text', 'text', 'text', 'text'],
        'Function link_session_entry_upserted exists'
    );
   
    RETURN NEXT has_function(
        schema_name,
        'sat_exception_diagnostics_upserted',
        ARRAY['text', 'text', 'text', 'text', 'text', 'text', 'text', 'text'],
        'Function sat_exception_diagnostics_upserted exists'
    );
   
   RETURN NEXT has_function(
        schema_name,
        'hub_exception_upserted',
        ARRAY['text', 'text', 'text'],
        'Function hub_exception_upserted exists'
    );
   
    RETURN NEXT has_function(
        schema_name,
        'sat_operation_session_entry_payload_upserted',
        ARRAY['text', 'text', 'jsonb', 'text', 'jsonb', 'text', 'text'],
        'Function sat_operation_session_entry_payload_upserted exists'
    );

   RETURN NEXT has_function(
        schema_name,
        'sat_operation_session_entry_session_state_upserted',
        ARRAY['text', 'text', 'text', 'text', 'text', 'jsonb', 'text', 'text'],
        'Function sat_operation_session_entry_session_state_upserted exists'
    );

    RETURN NEXT has_function(
        schema_name,
        'sat_operation_session_upserted',
        ARRAY['text', 'text', 'text', 'timestamp', 'timestamp', 'text', 'text', 'jsonb', 'jsonb', 'text', 'jsonb', 'text', 'text'],
        'Function sat_operation_session_upserted exists'
    );
   
   RETURN NEXT has_function(
        schema_name,
        'udi_insert_session_state',
        ARRAY['text', 'text', 'text', 'text', 'text'],
        'Function udi_insert_session_state exists'
    );

	RETURN NEXT has_function(
        schema_name,
        'udi_insert_session_with_state',
        ARRAY['text', 'text', 'text', 'text', 'jsonb', 'jsonb', 'text', 'text', 'text', 'text'],
        'Function udi_insert_session_with_state exists'
    );

	RETURN NEXT has_function(
        schema_name,
        'sat_operation_session_entry_session_state_upserted',
        ARRAY['text', 'text', 'text', 'text', 'text', 'jsonb', 'text', 'text'],
        'Function sat_operation_session_entry_session_state_upserted exists'
    );

   	return_value := techbd_udi_ingress.udi_insert_interaction(
				   	interaction_id 	=> interaction_id_value,
				   	interaction_key	=> interaction_key_value,
				   	request_payload => source_content::jsonb, 
				   	elaboration 	=> elaboration_value, 
				   	created_by		=> created_user, 
				   	provenance 		=> provenance_value
				   	);
				   
	RETURN NEXT ok(return_value IS NOT NULL, 'Function techbd_udi_ingress.udi_insert_interaction successfully executed');	
   
	SELECT * INTO hub_interaction_row 
	FROM techbd_udi_ingress.hub_interaction hub
		WHERE 1 = 1 
		AND hub.key			= interaction_key_value
		AND hub.created_by 	= created_user
		AND hub.provenance 	= provenance_value
		;

	RETURN NEXT ok(hub_interaction_row IS NOT NULL,'Successfully inserted interaction information into hub_interaction');
	
	RETURN NEXT ok(
    EXISTS(SELECT 1 FROM techbd_udi_ingress.sat_interaction_http_request sat
           WHERE 1 = 1 
           AND sat.hub_interaction_id	= hub_interaction_row.hub_interaction_id
           AND sat.request_payload		= source_content::jsonb	
           AND sat.elaboration			= elaboration_value
           AND sat.created_by 			= created_user
           AND sat.provenance 			= provenance_value
           ),
    'Successfully inserted interaction information into sat_interaction_http_request'
	);
	
    -- Insert session
    session_info := techbd_udi_ingress.udi_insert_session(
        interaction_id_value, 
        namespace_value, 
        source_content,
        content_type_value, 
        boundary_value, 
        elaboration_value, 
        created_user, 
        provenance_value
    );

   RETURN NEXT ok(session_info.hub_session_id IS NOT NULL AND session_info.hub_session_entry_id IS NOT NULL, 'Successfully executed the function udi_insert_session with return value');
  
    RETURN NEXT ok(
    EXISTS(SELECT 1 FROM techbd_udi_ingress.sat_operation_session_entry_payload sat
           WHERE 1 = 1 
           AND sat.hub_operation_session_entry_id = session_info.hub_session_entry_id
           AND sat.content_type = content_type_value
           AND sat.ingest_src	= source_content	
           AND sat.elaboration 	= elaboration_value
           AND sat.created_by 	= created_user
           AND sat.provenance 	= provenance_value
           ),
    'Successfully inserted payload information into sat_operation_session_entry_payload'
	);

	-- Insert session state
	return_value := techbd_udi_ingress.udi_insert_session_state(
					session_info.hub_session_entry_id, 
					from_state_value,
					to_state_value,
					created_user,
					provenance_value
					);
				
    -- Validate session state insertion
    RETURN NEXT ok(return_value IS NOT NULL, 'Successfully executed the function udi_insert_session_state with return value');

   SELECT hub.* INTO hub_operation_session_row
   FROM techbd_udi_ingress.hub_operation_session hub
               WHERE hub.key = interaction_id_value
               AND hub.provenance = provenance_value
               AND hub.created_by = created_user
               AND hub.hub_operation_session_id = session_info.hub_session_id
               ;
   
    RETURN NEXT ok(hub_operation_session_row IS NOT NULL, 'Successfully inserted into hub_operation_session');
                                  	
	SELECT hub.* INTO hub_operation_session_entry_row
		FROM techbd_udi_ingress.hub_operation_session_entry hub
		   	WHERE hub.key = interaction_id_value
			   	AND hub.provenance = provenance_value
			   	AND hub.created_by = created_user
			   	AND hub.hub_operation_session_entry_id = session_info.hub_session_entry_id
			   	;
			   
   	RETURN NEXT ok(hub_operation_session_entry_row IS NOT NULL, 'Successfully inserted into hub_operation_session_entry');
  	
  	SELECT lnk.* INTO link_session_entry_row 
  		FROM techbd_udi_ingress.link_session_entry lnk
   			WHERE lnk.hub_operation_session_id = session_info.hub_session_id 
			   	AND lnk.hub_operation_session_entry_id = session_info.hub_session_entry_id
			   	AND lnk.created_by = created_user
			   	AND lnk.provenance = provenance_value
			   	;
			   	
  	RETURN NEXT ok(link_session_entry_row IS NOT NULL, 'Successfully inserted into link_session_entry');			   	    
  	
  	SELECT sat.* INTO sat_operation_session_entry_session_state_row  
  	FROM techbd_udi_ingress.sat_operation_session_entry_session_state sat
  	WHERE sat.hub_operation_session_entry_id = session_info.hub_session_entry_id
   	AND sat.from_state 	= from_state_value
   	AND sat.to_state 	= to_state_value
   	AND sat.created_by 	= created_user
   	AND sat.provenance 	= provenance_value
   	;
   
   	RETURN NEXT ok(hub_operation_session_entry_row IS NOT NULL, 'Successfully inserted state information into sat_operation_session_entry_session_state');  	   
END;
$function$
;
/*==============================================================================================================================*/